import math
import re
import numpy as np
from algorithm.parameters import params
# *****************************************************************************
# Helper Code
# *****************************************************************************

# *****************************************************************************

#  evolved function
<insertCodeHere>


<insertFitnessFunction>


#  function to evaluate fitness
def fitness():
  error = []
  cases = []
  n_actual_train_samples = params['NUM_TRAIN_EXAMPLES']
  inval_ = inval[:n_actual_train_samples]
  outval_ = outval[:n_actual_train_samples]
  for (i, o) in zip(inval_, outval_):
    values = fitnessTrainingCase(i, o)
    error.extend(values)
    cases.append(all(v < 0.000000001 for v in values))
  return error, cases


import sys
quality = sys.maxsize
caseQuality, cases = fitness()
quality = sum(caseQuality)
