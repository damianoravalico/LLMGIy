<predefined> ::= "def evolve("<var>"):{:"<NEWLINE><code>":}"

<NEWLINE> ::= "#"
<var> ::= "v0" | "v1" | "v2" | "v3" | "v4" | "v5" | "v6"

<code> ::= <statement> | <code><statement> | <statement> | <statement>
<statement> ::= <stmt_list><NEWLINE> | <compound_stmt> | <stmt_list><NEWLINE> | <compound_stmt> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE>
<compound_stmt> ::= <for> | <if>
<stmt_list> ::= <assign> | <return>

<return> ::= "return "<var> | "return "<num> | "return "<var>" "<math_op>" "<num>

<assign> ::= <var>" "<ass_op>" "<num> | <var>" "<ass_op>" "<var>"["<var>"]" | <var>" "<ass_op>" "<var> | <var>" "<ass_op>" np.cumsum("<var>")" | <var>" "<ass_op>" np.argmin("<var>" "<op>" "<num>")"

<for> ::= "for "<var>" in range(len("<var>")):{:"<NEWLINE><code>":}" | "for ("<var>", "<var>") in enumerate("<var>"):{:"<NEWLINE><code>":}"

<if> ::= "if "<condition>":{:"<NEWLINE><code>":}"
<condition> ::= <var>" "<op>" "<num> | <condition>" "<cond_op>" "<condition> | <func>" "<op>" "<num> | <var>" "<op>" "<func>
<op> ::= "<" | "<=" | ">" | ">=" | "!="
<cond_op> ::= "or" | "and" | "not"
<math_op> ::= "+" | "-"
<ass_op> ::= "=" | "+="

<num> ::= "-1" | "0" | "1"

<func> ::= "sum(["<var>"])" | "len("<var>") "<math_op>" "<num>
