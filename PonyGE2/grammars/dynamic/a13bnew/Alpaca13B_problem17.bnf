<predefined> ::= <IMPORTS>"def evolve("<vars>"):{:"<NEWLINE><code>":}"
<NEWLINE> ::= "#"

<all_vars> ::= <vars> | <STRINGS> | <nums> | <var_list> | <var_fuction> | <var_expr> |
               <vars> | <STRINGS> | <nums> | <var_list> | <var_expr> |
               <vars> | <STRINGS> | <nums> <vars> | <STRINGS> | <nums>
<vars> ::= <var> | <var>", "<vars> | <var> | <var> | <var> | <var> | <var> | <var> | <var>", "<all_vars> | <var> | <var> | <all_vars>", "<all_vars>
<var_list> ::= <var><index_list> | <var>"["<STRINGS>"]" | <var><index_list><method> | <var>"["<STRINGS>"]"<method> | <all_vars><index_list>
<index_list> ::= "["<all_vars>"]" | "["<all_vars>":]" | "["<all_vars>":"<all_vars>"]" | "[:"<all_vars>"]"
<var_fuction> ::= <FUNC>"("<all_vars>")" | <all_vars><method> | <all_vars><method>
<var_expr> ::= <all_vars>" "<math_op>" "<all_vars> | <all_vars>" "<op>" "<all_vars> | "("<var_expr>")" | <all_vars>" "<math_op>" "<all_vars> | <all_vars>" "<op>" "<all_vars>

<code> ::= <statement> | <code><statement> | <statement> | <statement> | <statement>
<statement> ::= <stmt_list><NEWLINE> | <compound_stmt> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE>
<compound_stmt> ::= <if> | <for> | <while>
<stmt_list> ::= <assign> | <return> | <print> | <update_var> | "break" | "continue" | "pass" | <assign> | <return> | <raise> | <update_var> | "break" | "continue" | "pass"

<raise> ::= "raise ValueError("<STRINGS>")"

<if> ::= "if "<condition>":{:"<NEWLINE><code>":}"<if_stmt1>"else:{:"<NEWLINE><code>":}" | "if "<condition>":{:"<NEWLINE><code>":}else:{:"<NEWLINE><code>":}" | "if "<condition>":{:"<NEWLINE><code>":}" | "if "<condition>":{:"<NEWLINE><code>":}"<if_stmt1>
<if_stmt1> ::= "elif "<condition>":{:"<NEWLINE><code>":}" | <if_stmt1>"elif "<condition>":{:"<NEWLINE><code>":}"
<condition> ::= <all_vars>" "<math_op>" "<num>" "<op>" "<num> | <condition>" "<cond_op>" "<condition> |  <all_vars>" "<op>" "<num> | <funcss>" "<op>" "<num> | <all_vars>" "<op>" "<funcss> | <all_vars>" "<op>" "<all_vars>
<op> ::= "<" | "<=" | ">" | ">=" | "!=" | "=="
<cond_op> ::= "or" | "and" | "not"

<assign> ::= <var>" "<ass_op>" ''" |
             <var>" "<ass_op>" "<all_vars> |
             <var>" "<ass_op>" []" | 
             <vars>" "<ass_op>" "<all_vars> |
             <vars>" "<ass_op>" "<var_expr> |

             <var>" "<ass_op>" ["<list>"]" | 
             <var>" "<ass_op>" ''.join("<var>")" |  
             <var>" "<ass_op>" "<sum> | 
             <var>" "<ass_op>" ''.join("<var>")"<method>"(' ', '')"


<method> ::= <METHOD>"()" | <METHOD>"("<all_vars>")"

<nums> ::=  <num> | <num> | <num> | <num><nums> | "-"<nums>
<num> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<return> ::= "return "<var> | "return "<STRINGS> | "return str("<var>")" | "return ''.join("<var>")" | "return "<nums> | "return "<all_vars> | "return str("<all_vars>")" | "return "<sum> | "return "<funcss>

<print> ::= "print("<STRINGS>")" | "print("<var>")" | "print("<STRINGS>")" | "print("<var>")" | "print("<all_vars>")"

<for> ::= "for "<var>" in "<var>":{:"<NEWLINE><code>":}" | 
          "for "<var>" in "<FUNC>"("<all_vars>"):{:"<NEWLINE><code>":}" |
          "for "<var>" in "<FUNC>"("<FUNC>"("<all_vars>")):{:"<NEWLINE><code>":}" |
          "for "<var>", "<var>" in "<FUNC>"("<all_vars>"):{:"<NEWLINE><code>":}" |
          "for ("<var>", "<var>") in "<FUNC>"("<all_vars>"):{:"<NEWLINE><code>":}" |
          "for "<var>" in "<var_list>":{:"<NEWLINE><code>":}"

<while> ::= "while "<var>":{:"<NEWLINE><code>":}" | "while "<var>" "<op>" "<all_vars>":{:"<NEWLINE><code>":}"

<inline_for> ::= "for "<var>" in "<all_vars>

<update_var> ::= <var><method>

<split> ::= <var><method>"('"<all_vars>")" | <var><method>"("<all_vars>")" | <all_vars>

<list> ::= <all_vars> | <inline_for> | <var><index_list> | <all_vars>" "<inline_for>

<sum> ::= <all_vars>" "<list_op>" ''.join(("<all_vars>" "<inline_for>"))" | "["<list>"] "<list_op>" ["<list>"]" | "''.join(["<all_vars>" "<inline_for>"])"

<math_op> ::= "+" | "-" | "%" | "//" | "*" | "/" | "**"
<ass_op> ::= "=" | "+=" | "-=" | "*="
<list_op> ::= "+"

<funcss> ::= <FUNC>"(["<all_vars>"])" | <FUNC>"("<var>") "<math_op>" "<num> | <FUNC>"("<var><index_list>")" | <FUNC>"(["<list>"] "<math_op>" "<all_vars>") "<math_op>" "<all_vars>
<FUNC> ::= "sum" 
<METHOD> ::= ''
<STRINGS> ::= ''
<var> ::= "v0" | "v1" | "v2" 
<IMPORTS> ::= "" | ""
